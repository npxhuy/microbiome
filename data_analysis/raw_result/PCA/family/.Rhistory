anova(S_isi8, S_isi7)
# Unwanted stuffs
#####
PCA.scaled_log_counts <- prcomp(t(PCA3), scale. = F, center = T)
PCA.summary <- as.data.frame(t((summary(PCA.scaled_log_counts))$importance)) %>%
rownames_to_column(var = "Principal Component")
PCA.data.frame <- (as.data.frame(PCA.scaled_log_counts$x)) %>%
rownames_to_column(var = "sample_id") %>%
left_join(metadata, by = "sample_id")
# Unwanted stuffs
#####
PCA.scaled_log_counts <- prcomp(t(PCA2), scale. = F, center = T)
PCA.summary <- as.data.frame(t((summary(PCA.scaled_log_counts))$importance)) %>%
rownames_to_column(var = "Principal Component")
PCA.data.frame <- (as.data.frame(PCA.scaled_log_counts$x)) %>%
rownames_to_column(var = "sample_id") %>%
left_join(metadata, by = "sample_id")
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
stat_ellipse() +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse() +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse(aes(fill=pop)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse(geom = "polygon",
aes(fill = pop)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse(type = "norm",
aes(fill = pop)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
#stat_ellipse(type = "norm",
#            aes(fill = pop)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant, linetype=pop))+
stat_ellipse() +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse() +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse(geom = "polygon",
aes(fill = pop),
alpha = 0.25) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
first <- ggplot(PCA.data.frame, aes(x = PC1, y = PC2)) +
#xlim(-70,60) + ylim(-70,25)+ #0%
#xlim(-40,40) + ylim(-20,25)+ #50%
#xlim(-40,50) + ylim(-25,25) +
xlim(-20, 20)+ ylim(-20, 25) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(size = 4, stroke = 1.25, aes(shape = pop, color = hostplant))+
stat_ellipse(geom = "polygon",
aes(fill = hostrange),
alpha = 0.25) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Host Plant")+
geom_point(pch = 21,stroke = 0, size = 2, aes(fill = hostrange))+
scale_shape_manual(values = c(0,1,15,16,2,17,5,18), name = "Population") +
scale_fill_manual(values = c("Allopatric" = "white", "Sympatric" = "black"), name = "Host Range") +
theme_minimal(base_size = 12) + theme(legend.position = "bottom",legend.key = element_rect(fill = "lightgrey")) +
facet_grid(~transect)
first
rm(list=ls())
# Set working directory
setwd("/Users/hy/Documents/GitHub/microbiome/data_analysis/raw_result/alpha/species")
# Load library, you may have to install them first using install.package()
library(lme4)
library(tidyverse)
# Load required data
metadata <- read.table("/Users/hy/Documents/GitHub/all.pops.metadata.tsv",header=TRUE)
count <- read.table("species_count.txt",col.names = c("sample_id","richness"))
alpha1 <- read.table("shannon_alpha.txt", col.names = c("sample_id","shannon"))
alpha2 <- read.table("inverse_simpson_alpha.txt", col.names = c("sample_id","inverse_simpson"))
# Join with the metadata
count_join <- (count) %>%
left_join(metadata, by = "sample_id")
alpha1_join <- (alpha1) %>%
left_join(metadata, by = "sample_id")
alpha2_join <- (alpha2) %>%
left_join(metadata, by = "sample_id")
alpha1_plot <- ggplot(alpha1_join, aes(x=pop,y=shannon, color=hostplant, shape=hostrange)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Hostplant")+
geom_boxplot(outlier.shape = NA) + theme_bw() +
xlab("Population") + ylab("Shannon Diversity") +
facet_grid(~transect, scales = "free") +
theme(legend.position = "bottom") +
geom_jitter(width = 0.1)
alpha2_plot <- ggplot(alpha2_join, aes(x=pop,y=inverse_simpson, color=hostplant, shape=hostrange)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Hostplant")+
geom_boxplot(outlier.shape = NA) + theme_bw() +
xlab("Population") + ylab("Inverse Simpson Diversity") +
facet_grid(~transect, scales = "free") +
theme(legend.position = "bottom") +
geom_jitter(width = 0.1)
combine <- ggarrange(alpha1_plot, alpha2_plot, ncol = 1,nrow = 2, common.legend = TRUE, labels = "AUTO", legend = "bottom")
ggsave(plot = combine, filename = "combine_alpha_F.pdf", height = 7, width = 5.5)
# Set working directory
setwd("/Users/hy/Documents/GitHub/microbiome/data_analysis/raw_result/alpha/family")
alpha1 <- read.table("shannon_alpha.txt", col.names = c("sample_id","shannon"))
alpha1 <- read.table("shannon_alpha_F.txt", col.names = c("sample_id","shannon"))
alpha2 <- read.table("inverse_simpson_alpha_F.txt", col.names = c("sample_id","inverse_simpson"))
alpha1_plot <- ggplot(alpha1_join, aes(x=pop,y=shannon, color=hostplant, shape=hostrange)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Hostplant")+
geom_boxplot(outlier.shape = NA) + theme_bw() +
xlab("Population") + ylab("Shannon Diversity") +
facet_grid(~transect, scales = "free") +
theme(legend.position = "bottom") +
geom_jitter(width = 0.1)
alpha2_plot <- ggplot(alpha2_join, aes(x=pop,y=inverse_simpson, color=hostplant, shape=hostrange)) +
scale_color_manual(values = c("#5E548E", "#32936F"), name = "Hostplant")+
geom_boxplot(outlier.shape = NA) + theme_bw() +
xlab("Population") + ylab("Inverse Simpson Diversity") +
facet_grid(~transect, scales = "free") +
theme(legend.position = "bottom") +
geom_jitter(width = 0.1)
combine <- ggarrange(alpha1_plot, alpha2_plot, ncol = 1,nrow = 2, common.legend = TRUE, labels = "AUTO", legend = "bottom")
ggsave(plot = combine, filename = "combine_alpha_F.pdf", height = 7, width = 5.5)
rm(list=ls())
# Set working directory
setwd("/Users/hy/Documents/GitHub")
# Load library, you may want to install them
library(dplyr)
library(circlize)
library(ComplexHeatmap)
# Load data
data <- read.table("newbeta_F.txt")
metadata <- read.table("/Users/hy/Documents/GitHub/all.pops.metadata.tsv",header=TRUE)
# Prepare to construct matrix
metadata <- metadata %>%
arrange(pop)
# Change label
metadata <- metadata %>%
group_by(pop) %>%
mutate(new_pop = paste0(pop, "_", sprintf("%02d", row_number()))) #%>% # Add a new column name "new_name" with value of pop and count number
# Make new_data by merging the original data with the meta data
new_data <- merge(data, metadata, by.x = "V1", by.y = "sample_id", all.x = TRUE)
new_data <- merge(new_data, metadata, by.x = "V2", by.y = "sample_id", all.x = TRUE)
# Select the required columns in the desired order
new_data <- new_data[, c("new_pop.x", "new_pop.y", "V3")]
# Rename the columns
colnames(new_data) <- c("V1", "V2", "V3")
# Extract unique sample names
sample_names <- sort(unique(c(new_data$V1, new_data$V2)))
# Create an empty matrix
# Dimensions based on the length of the sample_names vector.
# The matrix is initialized with zeros.
matrix_data <- matrix(0, nrow = length(sample_names), ncol = length(sample_names))
# Fill in the matrix with values from the third column
# The for loop iterates over each row of the data data frame:
for (i in 1:nrow(new_data)) {
# Finds the index of the V1 value in the sample_names vector and assigns it to row_index
row_index <- match(new_data$V1[i], sample_names)
# Finds the index of the V2 value in the sample_names vector and assigns it to col_index
col_index <- match(new_data$V2[i], sample_names)
# Assigns the value from the V3 column of data to the corresponding position in matrix_data.
matrix_data[row_index, col_index] <- new_data$V3[i]
# Set symmetrical value
matrix_data[col_index, row_index] <- new_data$V3[i]
}
# Transposes the matrix to a symmetrical matrix
matrix_data <- t(matrix_data)
# Set row and column names
rownames(matrix_data) <- sample_names
colnames(matrix_data) <- sample_names
# Transform to matrix
df <- as.data.frame(matrix_data)
df$row <- rownames(matrix_data)
# Reshape the data to long format
df_long <- reshape2::melt(df, id.vars = "row")
# Plot the heatmap using ggplot
norm_heat <- ggplot(df_long, aes(x = variable, y = row, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "#534b7e") +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(fill = "Beta diversity") + xlab("") + ylab("")
# Clustering heatmap + dendogram
col_fun = colorRamp2(c(0, 0.8), c("white", "#534b7e"))
heat_dendo <- Heatmap(matrix_data,
clustering_distance_rows = "euclidean",
heatmap_legend_param = list(
title = "Beta diversity",
labels = c(0,0.2,0.4,0.6,0.8)),
col = col_fun,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
# Save plot
ggsave(plot = norm_heat, filename = "norm_heat.pdf", height = 11, width = 12)
# heat_dendo was save differently because cant use ggsave, have not figured out why
pdf("heat_dendo.pdf",width = 12, height = 11)
draw(heat_dendo)
dev.off()
# Load data
data <- read.table("newbeta.txt")
metadata <- read.table("/Users/hy/Documents/GitHub/all.pops.metadata.tsv",header=TRUE)
# Prepare to construct matrix
metadata <- metadata %>%
arrange(pop)
# Change label
metadata <- metadata %>%
group_by(pop) %>%
mutate(new_pop = paste0(pop, "_", sprintf("%02d", row_number()))) #%>% # Add a new column name "new_name" with value of pop and count number
# Make new_data by merging the original data with the meta data
new_data <- merge(data, metadata, by.x = "V1", by.y = "sample_id", all.x = TRUE)
new_data <- merge(new_data, metadata, by.x = "V2", by.y = "sample_id", all.x = TRUE)
# Select the required columns in the desired order
new_data <- new_data[, c("new_pop.x", "new_pop.y", "V3")]
# Rename the columns
colnames(new_data) <- c("V1", "V2", "V3")
# Extract unique sample names
sample_names <- sort(unique(c(new_data$V1, new_data$V2)))
# Create an empty matrix
# Dimensions based on the length of the sample_names vector.
# The matrix is initialized with zeros.
matrix_data <- matrix(0, nrow = length(sample_names), ncol = length(sample_names))
# Fill in the matrix with values from the third column
# The for loop iterates over each row of the data data frame:
for (i in 1:nrow(new_data)) {
# Finds the index of the V1 value in the sample_names vector and assigns it to row_index
row_index <- match(new_data$V1[i], sample_names)
# Finds the index of the V2 value in the sample_names vector and assigns it to col_index
col_index <- match(new_data$V2[i], sample_names)
# Assigns the value from the V3 column of data to the corresponding position in matrix_data.
matrix_data[row_index, col_index] <- new_data$V3[i]
# Set symmetrical value
matrix_data[col_index, row_index] <- new_data$V3[i]
}
# Transposes the matrix to a symmetrical matrix
matrix_data <- t(matrix_data)
# Set row and column names
rownames(matrix_data) <- sample_names
colnames(matrix_data) <- sample_names
# Transform to matrix
df <- as.data.frame(matrix_data)
df$row <- rownames(matrix_data)
# Reshape the data to long format
df_long <- reshape2::melt(df, id.vars = "row")
# Plot the heatmap using ggplot
norm_heat <- ggplot(df_long, aes(x = variable, y = row, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "#534b7e") +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(fill = "Beta diversity") + xlab("") + ylab("")
# Clustering heatmap + dendogram
col_fun = colorRamp2(c(0, 0.8), c("white", "#534b7e"))
heat_dendo <- Heatmap(matrix_data,
clustering_distance_rows = "euclidean",
heatmap_legend_param = list(
title = "Beta diversity",
labels = c(0,0.2,0.4,0.6,0.8)),
col = col_fun,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
# Save plot
ggsave(plot = norm_heat, filename = "norm_heat.pdf", height = 11, width = 12)
# heat_dendo was save differently because cant use ggsave, have not figured out why
pdf("heat_dendo.pdf",width = 12, height = 11)
draw(heat_dendo)
dev.off()
# Load packages
library(tidyverse)
library(dplyr)
library(tibble)
library(ggplot2)
library(DESeq2)
library(RColorBrewer)
library(ggpubr)
rm(list=ls())
# Input 1: metadata
metadata <- read.table("/Users/hy/Documents/GitHub/all.pops.metadata.tsv",header=TRUE)
# Function 1: Merge data function
merge_data_funciton <- function(dir){
setwd(dir)
# Take the directory that contains the bracken files
# Put the names of the files into a list
files <- list.files(dir)
# Manually handle the first file
merge_data <- read.table(files[1], header=TRUE, sep='\t') # Read file
name <- sub("\\..*", "", files[1]) # Change column name
colnames(merge_data)[2] <- name
# Set the first data frame as a variable for the loop
# merge_data <- one
for (i in 2:length(files)){ # Loop through the files
temp_data <- read.table(files[i], header=TRUE, sep='\t') # Read the df
colnames(temp_data)[2] <- sub("\\..*", "", files[i]) # Change column name
merge_data <- merge(merge_data, temp_data, all.x = TRUE, all.y = TRUE) # Merge
}
return(merge_data)
}
merge_data <- merge_data_funciton("/Users/hy/Documents/GitHub/microbiome/data_analysis/raw_result/PCA/family")
# Function 2: Find rows of species that need to be removed
removed <- function(percentage, dat, thres) {
to_be_removed <- c()
for (i in 1:nrow(dat)) {
if (sum(dat[i, ] <= thres) >= ((1-percentage) * ncol(dat))) { # Here we count the number of 0 instead of species, so have to 1 - percentage
to_be_removed <- c(to_be_removed, i)
}
}
return(to_be_removed)
}
# Function 3: Remove the rows from data
clean_data <- function(vec,dat){
if (length(vec)>0){
for (i in 1:length(vec)){
dat <- dat[-rev(vec)[i],]
}
}
return(dat)
}
# Replace NA in ORIGINAL DATA with 0
raw_counts_matrix <- merge_data %>%
mutate(across(where(is.numeric), ~replace_na(.x, 0))) %>% # Replace NA with 0
column_to_rownames("name") %>% #Change to first column (label as name) to the row name
as.matrix()
PCA2 <- log2(clean_data(vec = removed( percentage = 0.3, dat = raw_counts_matrix, thres = 0),
dat = raw_counts_matrix) + 1)
library(vegan)
View(PCA2)
# make sure that the order of sample_id in the count matrix are the same as the metadata
# here, filt30_log_counts_matrix is the log-shifted matrix of counts, filtered to keep those families in >30% of samples
# filt30_log_counts_matrix has the the families as columns, the samples as rows.
filt30_log_counts_matrix <- PCA2
filt30_log_counts_matrix <- filt30_log_counts_matrix[metadata$sample_id,]
View(metadata)
# make sure that the order of sample_id in the count matrix are the same as the metadata
# here, filt30_log_counts_matrix is the log-shifted matrix of counts, filtered to keep those families in >30% of samples
# filt30_log_counts_matrix has the the families as columns, the samples as rows.
filt30_log_counts_matrix <- t(PCA2)
View(filt30_log_counts_matrix)
filt30_log_counts_matrix <- filt30_log_counts_matrix[metadata$sample_id,]
# run the pca using the `vegan::rda()` function
filt30_pca<-rda(filt30_log_counts_matrix, scale=F)
# calculate ellipses for each of the populations
filt30_ord_pc1_pc2<-ordiellipse(filt30_pca,
choices = c(1,2),
metadata$pop,
display = "sites",
kind = "se",
conf = 0.95, # this indicates that we want the 2 dimensional 95% confidence interval
label = T)
# run the pca using the `vegan::rda()` function
filt30_pca<-rda(filt30_log_counts_matrix, scale=F)
# calculate ellipses for each of the populations
filt30_ord_pc1_pc2<-ordiellipse(filt30_pca,
choices = c(1,2),
metadata$pop,
display = "sites",
kind = "se",
conf = 0.95, # this indicates that we want the 2 dimensional 95% confidence interval
label = T)
View(filt30_pca)
# extract the ellipses into a dataframe that we can use in ggplot2
filt30_ord_pc1_pc2.long <- ordiellipse.long(filt30_ord_pc1_pc2, grouping.name="pop")
View(filt30_log_counts_matrix)
# run the pca using the `vegan::rda()` function
filt30_pca<-rda(filt30_log_counts_matrix, scale=F)
filt30_log_counts_matrix <- filt30_log_counts_matrix[metadata$sample_id,]
# run the pca using the `vegan::rda()` function
filt30_pca<-rda(filt30_log_counts_matrix, scale=F)
# calculate ellipses for each of the populations
filt30_ord_pc1_pc2<-ordiellipse(filt30_pca,
choices = c(1,2),
metadata$pop,
display = "sites",
kind = "se",
conf = 0.95, # this indicates that we want the 2 dimensional 95% confidence interval
label = T)
plot.new()
# calculate ellipses for each of the populations
filt30_ord_pc1_pc2<-ordiellipse(filt30_pca,
choices = c(1,2),
metadata$pop,
display = "sites",
kind = "se",
conf = 0.95, # this indicates that we want the 2 dimensional 95% confidence interval
label = T)
# extract the ellipses into a dataframe that we can use in ggplot2
filt30_ord_pc1_pc2.long <- ordiellipse.long(filt30_ord_pc1_pc2, grouping.name="pop")
library(BiodiversityR)
install.package(BiodiversityR)
install.package("BiodiversityR")
install.packages(BiodiversityR)
install.packages("BiodiversityR")
library(BiodiversityR)
# extract the ellipses into a dataframe that we can use in ggplot2
filt30_ord_pc1_pc2.long <- ordiellipse.long(filt30_ord_pc1_pc2, grouping.name="pop")
install.packages("tcltk")
library(BiodiversityR)
library(tcltk)
library(BiodiversityR)
library(tcltk)
installed.packages(XQuartz)
library(BiodiversityR)
library(tcltk)
